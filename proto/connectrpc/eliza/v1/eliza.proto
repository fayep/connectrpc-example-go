// Copyright 2022-2023 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package connectrpc.eliza.v1;

// ElizaService provides a way to talk to Eliza, a port of the DOCTOR script
// for Joseph Weizenbaum's original ELIZA program. Created in the mid-1960s at
// the MIT Artificial Intelligence Laboratory, ELIZA demonstrates the
// superficiality of human-computer communication. DOCTOR simulates a
// psychotherapist, and is commonly found as an Easter egg in emacs
// distributions.
service ElizaService {
  // Say is a unary RPC. Eliza responds to the prompt with a single sentence.
  rpc Say(SayRequest) returns (SayResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // Converse is a bidirectional RPC. The caller may exchange multiple
  // back-and-forth messages with Eliza over a long-lived connection. Eliza
  // responds to each ConverseRequest with a ConverseResponse.
  rpc Converse(stream ConverseRequest) returns (stream ConverseResponse) {}

  // Chat is a bidirectional RPC.  The caller may exchange multiple back and forth
  // messages with OpenAI over a long-lived connection.  When a message is received
  // the message is queued for sending to OpenAI.  Many messages may be queued
  // (per connection limit of 6?) (for future we might enforce a limit on the server
  // side, so you can know if we are under a heavy load and set your expectations)
  // another future enhancement might be to give you an idea of how long you might
  // be waiting for your result (don't expect this now).  You send a ChatRequest
  // message and you will receive responses back from the server either a) to let you
  // know that the server is fully queued or b) the response to the first message
  // which has not yet been responded to.
  rpc Chat(stream ChatRequest) returns (stream ChatResponse) {} 

  // Introduce is a server streaming RPC. Given the caller's name, Eliza
  // returns a stream of sentences to introduce itself.
  rpc Introduce(IntroduceRequest) returns (stream IntroduceResponse) {}
}

// SayRequest is a single-sentence request.
message SayRequest {
  string sentence = 1;
}

// SayResponse is a single-sentence response.
message SayResponse {
  string sentence = 1;
}

// ConverseRequest is a single sentence request sent as part of a
// back-and-forth conversation.
message ConverseRequest {
  string sentence = 1;
}

// ConverseResponse is a single sentence response sent in answer to a
// ConverseRequest.
message ConverseResponse {
  string sentence = 1;
}

// ChatRequest is a single sentence request sent as part of a back and forth
// conversation. (rpc Chat) Setting last_message to true will return any
// remaining messages as they come and then disconnect you.
message ChatRequest {
  string sentence = 1;
  bool last_message = 2;
}

// ChatEnqueued is a submessage for ChatResponse which tells you the status of
// your request
message ChatEnqueued {
  string status = 1;
  int64 id = 2;
}

// ChatSentence is a submessage for ChatResponse which tells you the response.
message ChatSentence {
  string sentence = 1;
  int64 id = 2;
}

// ChatResponse is a single sentence response or a message telling you that
// the message has been queued.  In future we might extend this to include an
// id for the "enqueued" and "sentence" response so that you don't have to
// remember the order you sent the message in.
message ChatResponse {
  ChatEnqueued enqueued = 1;
  ChatSentence sentence = 2;
}

// IntroduceRequest asks Eliza to introduce itself to the named user.
message IntroduceRequest {
  string name = 1;
}

// IntroduceResponse is one sentence of Eliza's introductory monologue.
message IntroduceResponse {
  string sentence = 1;
}
